<div class="tf-slides">
  <div class="tf-slides-container">
    <div class="tf-progress-bar">
      <div class="tf-progress-bar-inner"></div>
    </div>
    <div class="tf-caption">
    </div>
    <div class="tf-slide tf-current">
    </div>
    <div class="tf-slide tf-next">
    </div>
  </div>
  <div class="tf-me-not-me-container">
    <div class="tf-me">Me</div>
    <div class="tf-not-me">Not Me</div>
    <div class="tf-loading tf-hidden">
      <span class="tf-loading-content">Loading...</span>
      <span class="tf-click-content tf-hidden">Click to reload!</span>
    </div>
  </div>
</div>
<style>
  .tf-slides{
    font-family: arial;
    text-align:center;
  }
  .tf-progress-bar{
    position: relative;
    height: 12px;
    width: 100%;
    z-index:1;
    background-color: #aaa;
    background-color: rgba(150, 150, 150, .5);
  }
  .tf-hidden{
    display: none;
  }
  .tf-progress-bar .tf-progress-bar-inner{
    height: 100%;
    width: 0%;
    background-color: #fff;
    border-radius: 0px 8px 8px 0px;
    -webkit-transition: width .8s ease-in-out;
    -moz-transition: width .8s ease-in-out;
    -o-transition: width .8s ease-in-out;
    transition: width .8s ease-in-out;
  }
  .tf-caption{
    position: absolute;
    color: #fff;
    width:100%;
    background-color: #333;
    background-color: rgba(0, 0, 0, .7);
    height: 48px;
    line-height: 48px;
    font-size: 20px;
    z-index:1;
  }
  .tf-slides .tf-slide{
    width: 100%;
    height: 100%;
    background-size: cover;
    display: inline-block;
    left: 0%;
    top: 0px;
    position: absolute;
  }
  .tf-slides .tf-slide.tf-current{
    left: 0%;
    transform: scale(1,1);
    zoom: 0.4\9;
    background-repeat: no-repeat;
    -webkit-transition: left .6s ease;
    -moz-transition: left .6s ease;
    -o-transition: left .6s ease;
    transition: left .6s ease;
  }
  .tf-slides .tf-slide.tf-next{
    left: 100%;
  }
  .tf-slides .tf-slides-container{
    height: 400px;
    width: 100%;
    position: relative;
    overflow: hidden;
  }
  .tf-slides.min-width-720 .tf-slides-container {
    height: 540px;
  }
  .tf-slides.min-width-720 .tf-slides-container .tf-slide.tf-current{
    transform: scale(1,1);
    zoom: 0.7\9;
  }
  .tf-slides.min-width-1200 .tf-slides-container {
    height: 700px;
  }
  .tf-slides.min-width-1200 .tf-slides-container .tf-slide.tf-current{
    transform: scale(1,1);
    zoom: 0.67\9;
  }

  .tf-me-not-me-container{
    width: 280px;
    margin: 0px auto;
    height: 43px;
    border-radius: 23px;
    line-height: 43px;
    text-align: center;
    position: relative;
    z-index: 1;
    margin-top: -80px;
    overflow: hidden;
    cursor: pointer;
  }
  .tf-me, .tf-not-me{
    font-size: 20px;
    height: 100%;
    display: inline-block;
    position: relative;
    width: 50%;
    float: left;
    color: #fff;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
  .tf-me{
    background-color: #00aeef;
  }
  .tf-me:active{
    background-color: #0B659A;
  }
  .tf-not-me{
    background-color: #ff5e5e;
  }
  .tf-not-me:active{
    background-color: #961111;
  }
  .tf-slides.tf-loading .tf-loading{
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #ff5e5e;
    color: #fff;
  }
  .tf-slides.tf-loading .tf-loading .tf-loading-content{
    -webkit-animation: fade-in-and-out 2s ease-out;
    -webkit-animation-iteration-count: infinite; 
  }
  @-webkit-keyframes fade-in-and-out {
    0% { opacity: 0.0;}
    50% { opacity: 1.0;}
    100% { opacity: 0.0;}
  }
</style>
<script>
  (function(){
    this.traitify = Object();
    var slideDeck = this;
    var traitify = this.traitify;
    var $ = function(item){
      if(typeof item == "string"){
        var items = slideDeck.querySelectorAll(item);
      } else {
        var items = item;
      }
      items.each = function(callback){
        for(i=0; i < this.length; i++){
          callback(i, this[i])
        }
      }
      items.html = function(html){
        if(html){
          return this[0].innerHTML = html;
        }else{
          return this[0].innerHTML;
        }
      }
      items.find = function(item){
        return $(this[0].querySelectorAll(item))
      }
      items.click = function(callback){
        this.each(function(i, item){
          item.onclick = callback;
        })
      }
      items.addClass = function(className){
        items.each(function(i, item){
          item.className = item.className.replace(className, "")
          item.className += " " + className
        })
        return items;
      }
      items.removeClass = function(className){
        items.each(function(i, item){
          item.className = item.className.replace(" " + className, "").replace(className, "")
        })
        return items;
      }
      items.hide = function(){
        items.addClass("tf-hidden");
      }
      items.show = function(){
        items.removeClass("tf-hidden")
      }
      items.css = function(options){
        items.each(function(i,item){
          $(Object.keys(options)).each(function(i, optionKey){
            item.style[optionKey] = options[optionKey];
          })
        })
      }
      return items;
    }
    $.db = {
      get: function(key){
        return JSON.parse(sessionStorage.getItem(key));
      },
      set: function(key, value){
        return sessionStorage.setItem(key, JSON.stringify(value));
      }
    }

    this.traitify.initialize = function(){
      /**********************************
       * PREPARE DATA
       **********************************/
      this.nodes = Object();
      this.nodes.slides = $(".tf-slides");
      this.nodes.me = this.nodes.slides.find(".tf-me");
      this.nodes.notMe = this.nodes.slides.find(".tf-not-me");
      this.nodes.slidesContainer = this.nodes.slides.find(".tf-slides-container");
      this.nodes.progressBar = this.nodes.slidesContainer.find(".tf-progress-bar");
      this.nodes.progressBarInner = this.nodes.slidesContainer.find(".tf-progress-bar-inner");
      this.nodes.currentSlide = $(".tf-slide.tf-current");
      this.nodes.nextSlide = $(".tf-slide.tf-next");
      this.nodes.caption = $(".tf-caption");
      this.nodes.loading = $(".tf-loading .tf-loading-content");
      this.nodes.clickToReload = $(".tf-loading .tf-click-content");

      this.imageSize = "image_desktop_retina";

      this.imageUrls = this.data.slides.map(function(slide){
        return slide[traitify.imageSize];
      })

      traitify.slideLock = false;
      this.db = Object();

      this.db.set = function(key, data){
        return $.db.set(traitify.assessmentId + key, data);
      }

      this.db.get = function(key){
        return $.db.get(traitify.assessmentId + key);
      }

      traitify.data.slideResponses = traitify.db.get("slides");

      if(!traitify.data.slideResponses){
        traitify.data.slideResponses = Object();
      }

      var slideIds = Object.keys(traitify.data.slideResponses)
      var playedSlides = traitify.data.slides.filter(function(slide, i){
        if(slideIds.indexOf(slide.id) != -1){
          return true;
        }else{
          return false;
        }
      })
      var unplayedSlides = traitify.data.slides.filter(function(slide, i){
        if(slideIds.indexOf(slide.id) == -1){
          return true;
        }else{
          return false;
        }
      })
      this.data.slides = playedSlides.concat(unplayedSlides);

      this.index = Object.keys(traitify.data.slideResponses).length ||  0;

      this.lastClick = new Date();

      /************************************
       * HANDLE TRANSITION 
       ************************************/
      var i, undefined, el = document.createElement('div'),
      transitions = [
        {key: 'transition', css: 'transitionend'},
        {key: 'OTransition', css: 'otransitionend'},  // oTransitionEnd in very old Opera
        {key: 'MozTransition', css: 'transitionend'},
        {key: 'WebkitTransition', css: 'webkitTransitionEnd'}
      ];
      $(transitions).each(function(i, transition){
        if (el.style[transition.key] !== undefined) {
            traitify.transitionEnd = transition.css;
        }
      })

      /*************************************
       * RESIZE
       *************************************/
      this.resizeTimer = false;
      var eventListener = function(item, eventListener, callback){
        if(item.addEventListener){
          item.addEventListener(eventListener, callback)
        } else if (item.attachEvent){
          item.attachEvent("on" + eventListener, callback)
        }
      }

      eventListener(window, "resize", function(){
          if(traitify.resizeTimeout){
            clearTimeout(traitify.resizeTimeout);
          }
          traitify.resizeTimeout = setTimeout(function(){
            traitify.options.trigger("resize");
            traitify.resizeTimeout = false;
          }, 100);
      });

      this.options.on("slideDeck.resize", function(){
        width = slideDeck.offsetWidth;
        traitify.nodes.slides.removeClass("min-width-1200");
        traitify.nodes.slides.removeClass("min-width-720");
        traitify.nodes.slides.removeClass("min-width-480");

        if(width > 1200){
          traitify.nodes.slides.addClass("min-width-1200");
        } else if (width > 720){
          traitify.nodes.slides.addClass("min-width-720");
        } else{
          traitify.nodes.slides.addClass("min-width-480");
        }
      })
      this.options.trigger("slideDeck.resize");

      this.options.on("slideDeck.transitionEnd", function(){
        traitify.options.trigger("slideDeck.setView");
        traitify.slideLock = false;
      })

      /************************************
       * SET SLIDES
       ************************************/
      this.options.on("slideDeck.addSlides", function(){
        var slideResponses = traitify.data.slideResponses;
        responses = Object.keys(slideResponses).map(function(slide){
          return slideResponses[slide];
        })
        Traitify.addSlides(traitify.options.assessmentId, responses).then(function(){
          traitify.options.trigger("slideDeck.finish");
        })
      })
      if(slideIds.length == this.data.slides.length){
        this.options.trigger("slideDeck.addSlides");
        return true;
      }
      this.options.on("slideDeck.setProgressBar", function(){
        percent = Math.round(((traitify.index + 1) / traitify.data.slides.length) * 100);
        traitify.nodes.progressBarInner.css({
          width:  percent + "%"
        });
      })

      this.options.trigger("slideDeck.setProgressBar");
       
      /************************************
       * SET VIEW
       ************************************/
      this.options.on("slideDeck.setView", function(){
        currentSlide = traitify.data.slides[traitify.index];
        nextSlide = traitify.data.slides[traitify.index + 1];
        traitify.nodes.caption.html(currentSlide.caption);
        
        traitify.nodes.currentSlide.css({
          backgroundImage: "url(" + currentSlide[traitify.imageSize] + ")",
          backgroundPosition: currentSlide.focus_x + "% " + currentSlide.focus_y + "%",
          "background-position-x": currentSlide.focus_x + "%",
          "background-position-y": currentSlide.focus_y + "%"
        });
        if(nextSlide && nextSlide[traitify.imageSize]){
          traitify.nodes.nextSlide.addClass("tf-next").removeClass("tf-current");
          traitify.nodes.nextSlide.css({
            backgroundImage: "url(" + nextSlide[traitify.imageSize] + ")",
            backgroundPosition: nextSlide.focus_x + "% " + nextSlide.focus_y + "%"
          });
        }
      })

      /************************************
       * HANDLE ACTIONS
       ************************************/
      this.options.on("slideDeck.animate", function(){
        if(!traitify.slideLock){
          traitify.slideLock = true;
          traitify.index++;
          traitify.options.trigger("slideDeck.setProgressBar");

          if(traitify.nodes.nextSlide){
            traitify.nodes.nextSlide.removeClass("tf-next").addClass("tf-current");
          }

          if(!traitify.transitionEnd){
            traitify.options.trigger("slideDeck.transitionEnd")
          }
        }
      })

      this.options.on("slideDeck.notMe slideDeck.me", function(data){
        currentSlide = traitify.data.slides[traitify.index];
        lastClick = traitify.lastClick;
        traitify.lastClick = new Date();
        traitify.data.slideResponses[currentSlide.id] = {
          id: currentSlide.id,
          response: data.value,
          time_taken: traitify.lastClick - lastClick
        }
        traitify.db.set("slides", traitify.data.slideResponses)

        var slideIds = Object.keys(traitify.data.slideResponses)
        if(slideIds.length == traitify.data.slides.length){
          traitify.options.trigger("slideDeck.addSlides");
        }
        traitify.options.trigger("slideDeck.animate");
      })


      /*********************************
       * HOOKS
       *********************************/
      this.nodes.me.click(function(){
        traitify.options.trigger("slideDeck.me", {value: true})
      })

      this.nodes.notMe.click(function(){
        traitify.options.trigger("slideDeck.notMe", {value: false})
      })

      this.nodes.clickToReload.click(function(){
        traitify.options.trigger("slideDeck.clickReload");
      })

      if(traitify.transitionEnd && window.addEventListener){
        traitify.nodes.nextSlide[0].addEventListener( traitify.transitionEnd, function( event ) { 
          traitify.options.trigger("slideDeck.transitionEnd") 
        }, false );
      }

      /********************************
       * NASTY IMAGE PRELOADING
       ********************************/
      this.imageTries = Object()
      this.images = Array();
      this.images.lastIndex = this.index;
      this.loadImage = function(i){
        if(traitify.imageUrls[i]){
          if(!traitify.imageTries[i]){
            traitify.imageTries[i]= 0;
          }
          traitify.images[i] = new Image();
          traitify.images[i].src = traitify.imageUrls[i];
          traitify.images[i].onerror = function(){
            traitify.imageTries[i]++;
            if(traitify.imageTries[i] < 30){
              setTimeout(function(){
                traitify.loadImage(i);
              }, 1000)
            }else{
              traitify.images.lastIndex = i;
              traitify.nodes.loading.hide();
              traitify.nodes.clickToReload.show();
            }
          }
          traitify.images[i].onload = function(){
            setTimeout(function(){
              traitify.loadImage(i + 1);
            }, 300)
            traitify.options.trigger("slideDeck.imageLoaded", this);
            traitify.nodes.clickToReload.hide();
            traitify.images.lastIndex = i;
            traitify.nodes.slides.removeClass("tf-loading");
          }
        }
      }
      
      traitify.options.trigger("slideDeck.setView");
      this.loadImage(traitify.index);
      
    }
  }).call(document.currentScript.parentNode);
</script>